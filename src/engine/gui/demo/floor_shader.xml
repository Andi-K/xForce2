<?xml version="1.0" encoding="UTF-8" ?>
<resource_file type="CanvasItemMaterial" subresource_count="3" version="1.1" version_name="Godot Engine v1.1.stable.d3b42e41b0">
	<ext_resource path="res://gui/demo/faceNormal.png" type="Texture"></ext_resource>
	<resource type="CanvasItemShader" path="local://1">
		<dictionary name="_code" shared="false">
			<string> "fragment" </string>
			<string> "// just pass the normal&#000a;&#000a;uniform texture normal;&#000a;vec2 ywnormal=tex( normal,UV).wy * vec2(2.0,2.0) - vec2(1.0,1.0);&#000a;NORMAL=vec3(ywnormal,sqrt(1 - (ywnormal.x * ywnormal.x) - (ywnormal.y * ywnormal.y) ));&#000a;&#000a;" </string>
			<string> "fragment_ofs" </string>
			<int> 0 </int>
			<string> "light" </string>
			<string> "//the tile half size in pixels&#000a;vec2 tile_vec=vec2(140,70);&#000a;float z_scale = 1.0;&#000a;//compute a 3D postion fot thelight&#000a;vec3 light_3d = vec3(-LIGHT_VEC.x,LIGHT_HEIGHT,LIGHT_VEC.y);&#000a;&#000a;//rotate the normal map to the same coordinates as the pseudo 3d ponit&#000a;//this could be optimized&#000a;float r = asin(tile_vec.y/tile_vec.x);&#000a;mat3 rot_mat = mat3( vec3(1,0,0), vec3(0,cos(r),-sin(r)), vec3(0,sin(r),cos(r)));&#000a;vec3 n =  rot_mat * NORMAL;&#000a;n.y=-n.y;&#000a;&#000a;//compute diffuse light&#000a;float dp = max(dot(normalize(n),-normalize(light_3d)),0);&#000a;LIGHT=vec4(vec3(dp),1.0)*COLOR*LIGHT_COLOR;&#000a;" </string>
			<string> "light_ofs" </string>
			<int> 0 </int>
			<string> "vertex" </string>
			<string> "//pass the x1 in local sprite coordinates.&#000a;//the sprite center (small red cross) is 0,0&#000a;VAR1.xy=SRC_VERTEX;" </string>
			<string> "vertex_ofs" </string>
			<int> 0 </int>
		</dictionary>

	</resource>
	<main_resource>
		<resource name="shader/shader" resource_type="Shader" path="local://1">  </resource>
		<int name="shader/shading_mode"> 0 </int>
		<resource name="shader_param/normal" resource_type="Texture" path="res://gui/demo/faceNormal.png">  </resource>

	</main_resource>
</resource_file>
